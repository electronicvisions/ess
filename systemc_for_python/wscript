#!/usr/bin/env python
import sys, os, re

from waflib.Tools.ccroot import stlink_task
from waflib.TaskGen import feature
from waflib.Node import Node


class run_cmake(stlink_task):
    def run(self):
        std_cpp_in_cxxflags = filter(lambda x: x.startswith('-std='), self.env.CXXFLAGS)
        std_cpp = None
        for version in std_cpp_in_cxxflags:
            # search for version in last
            m = re.search('(\d{2})', version)
            std_cpp = m.group(1)
        cmake_build = self.get_cwd().get_bld().find_or_declare('cmake_build')
        cmake_build.mkdir()
        ret = self.exec_command(
                'cmake {} '.format(self.get_cwd().abspath())
                + (' -DCMAKE_CXX_STANDARD={}'.format(std_cpp) if std_cpp else '')
                + ' -DCMAKE_BUILD_TYPE=Release'
                + ' -DCMAKE_POSITION_INDEPENDENT_CODE=ON'
                + ' -DBUILD_SHARED_LIBS=OFF',
                cwd = cmake_build, stdout=sys.stdout)
        if ret != 0:
            return ret
        ret = self.exec_command('cmake --build . -- VERBOSE=1', cwd = cmake_build, stdout=sys.stdout)
        if ret != 0:
            return ret
        ret = self.exec_command('cp src/libsystemc.a %s' % self.outputs[0].abspath(), cwd = cmake_build)
        return ret


@feature("cmake")
def cmake(self):
    self.link_task = self.create_task('run_cmake',
            self.path.get_src().ant_glob('src/**/*.(cpp|h)'),
            [ self.path.get_bld().find_or_declare('libsystemc.a') ])
    self.link_task.cwd = self.path.get_src().abspath()
    self.target = 'systemc'


def cmake_cleaning(bld):
    cwd = bld.path.get_bld().find_dir('cmake_build')
    bld.exec_command('rm -rf {}'.format(cwd.abspath()))


def options(opt):
    opt.load('compiler_cxx')
    opt.load('gtest')


def configure(cfg):
    cfg.load('compiler_cxx')
    cfg.load('gtest')
    cfg.find_program('cmake', mandatory=True)


def build(bld):
    bld(name='systemc',
        features='cmake')

    if bld.cmd == 'clean':
        cmake_cleaning(bld)
